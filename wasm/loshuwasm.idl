interface matrix_t {
  attribute long nrows;
  attribute long ncols;
  void matrix_t();
  void reshape(long m, long n);
  void push(double x);
  void zeros(long m, long n);
  void iden(long m);
  void release();
  void set(long i, long j, double x);
  double get(long i, long j);
  void mul(matrix_t B, matrix_t C);
  void transpose(matrix_t B);
  void col(long j, matrix_t B);
  double vnorm();
  void vnormzeq();
  void scaleeq(double s);
  void pluseq(matrix_t B, double s);
  void clone(matrix_t B);
  void minor(long i, long j, matrix_t B);
  void bliteq(matrix_t B, long i0, long i1, long j0, long j1);
  void slice(long i0, long i1, long j0, long j1, matrix_t B);
  void qr(matrix_t Q, matrix_t R);
  void stack4(matrix_t B, matrix_t C, matrix_t D, matrix_t E);
  void hessenberg(matrix_t H, matrix_t Q);
  void eigen(matrix_t V, matrix_t D, long maxiter);
  double cofactor(long i, long j);
  double det();
  void adj(matrix_t B);
  boolean inv(matrix_t B);
  void svd(matrix_t U, matrix_t S, matrix_t V);
  DOMString tostr();
  void print();
};